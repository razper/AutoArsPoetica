@page "/"
@inject IArsPoeticaService ArsPoeticaService
@implements IDisposable
<PageTitle>AutoPoetica</PageTitle>

<link href="https://fonts.googleapis.com/css2?family=Figtree:wght@400;600&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Lato:wght@300;700&display=swap" rel="stylesheet">

<div class="autopoetica-root">
    <div class="autopoetica-title">AUTOPOETICA</div>
    <div class="generate-center">
        <span class="generate-link" @onclick="@(() => GeneratePoem())">(Generate)</span>
    </div>
    <div class="autopoetica-content">
        <div class="autopoetica-left">
            <div class="poem-text">@DisplayedPoem</div>
        </div>
    </div>
</div>
<div class="autopoetica-bottomleft">
    <div class="autopoetica-bottomleft-row">
        <div class="autopoetica-section">
            <div class="autopoetica-section-title">(Environment)</div>
            <div class="environment-options">
                <div class="clickable-option" @onclick="@(() => SelectedEnvironment = "Nature")">
                    Nature
                </div>
                <div class="clickable-option" @onclick="@(() => SelectedEnvironment = "Aviation")">
                    Aviation
                </div>
            </div>
        </div>
        <div class="autopoetica-section">
            <div class="autopoetica-section-title">(Variables)</div>
            <div class="variables-list twocol">
                @foreach (var variable in EnvironmentVariables)
                {
                    <div class="variable-item">@variable</div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    body,
    .autopoetica-root,
    .autopoetica-content,
    .autopoetica-left,
    .autopoetica-section,
    .autopoetica-section-title,
    .variable-item,
    .generate-link,
    .environment-options,
    .clickable-option,
    .variables-list {
        font-family: 'Lato', sans-serif;
    }

    body,
    .autopoetica-root {
        background: #111;
        min-height: 100vh;
        margin: 0;
        padding: 0;
        color: #fff;
        font-size: 16pt;
    }

    .autopoetica-title {
        text-align: center;
        font-size: 30pt;
        font-weight: bold;
        letter-spacing: 2px;
        margin-top: 2rem;
        margin-bottom: 2rem;
        color: #fff;
        font-family: 'Figtree', sans-serif;
    }

    .autopoetica-content {
        display: flex;
        flex-direction: row;
        height: 70vh;
        width: 100vw;
        justify-content: flex-start;
        align-items: flex-start;
        position: relative;
    }

    .autopoetica-left {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-start;
        width: 60vw;
        padding: 2rem 2vw 2rem 4vw;
        z-index: 1;
    }

    .poem-text {
        color: #fff;
        font-size: 16pt;
        line-height: 1.6;
        white-space: pre-wrap;
        text-align: left;
        min-height: 400px;
        max-width: 700px;
        margin-bottom: 2rem;
    }

    .button-container {
        margin-top: 1rem;
    }

    .autopoetica-envvars {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        margin-left: 3vw;
        min-width: 340px;
        max-width: 540px;
    }

    .autopoetica-section {
        margin-bottom: 1rem;
        min-width: 180px;
        text-align: left;
    }

    .autopoetica-section-title {
        font-size: 16pt;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #ccc;
        text-align: left;
    }

    .environment-options {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .clickable-option {
        padding: 0.5rem 1rem;
        cursor: pointer;
        border-radius: 4px;
        transition: all 0.2s ease;
        font-size: 16pt;
    }

    .variables-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .variables-list.twocol {
        display: grid;
        grid-template-columns: repeat(2, 180px);
        gap: 0.05rem 2.5rem;
        min-width: 380px;
    }

    .variable-item {
        padding: 0.15rem 0;
        font-family: 'Lato', sans-serif;
        font-size: 16pt;
        color: #fff;
        line-height: 1.5;
        text-align: left;
    }

    .generate-link {
        color: #fff;
        font-size: 16pt;
        cursor: pointer;
        font-weight: 400;
        transition: color 0.2s;
        user-select: none;
    }

    .generate-center {
        width: 100vw;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 2rem;
    }

    .autopoetica-bottomleft {
        position: fixed;
        left: 2vw;
        bottom: 2vw;
        z-index: 2;
        background: transparent;
        min-width: 540px;
        min-height: 170px;
        display: flex;
        align-items: flex-end;
    }
    .autopoetica-bottomleft-row {
        display: flex;
        flex-direction: row;
        gap: 4vw;
        align-items: flex-start;
        margin-left: 0;
        margin-bottom: 0;
        width: 100%;
    }
</style>

@code {
    private string FullPoem = "";
    private string DisplayedPoem = "";
    private bool IsGenerating = false;
    private Timer? TypewriterTimer;
    private int CurrentIndex = 0;
    private const int TypewriterDelay = 50; // milliseconds between characters
    private string SelectedEnvironment = "Nature";
    private List<string> EnvironmentVariables => SelectedEnvironment switch
    {
        "Nature" => new List<string> { "Cloudiness", "Temperature", "Humidity", "WindSpeed", "Precipitation Type", "UVIndex",
"Visibility", "Pressure" },
        "Aviation" => new List<string> { "Aircrafts", "Average Speed", "Landings", "Takeoffs", "Aircraft Type", "Flight Duration", "Time Of Day", "Direction" },
        _ => new List<string>()
    };

    private async Task GeneratePoem()
    {
        if (IsGenerating) return;

        IsGenerating = true;

        // Stop any existing typewriter effect
        TypewriterTimer?.Dispose();

        // Get new poem
        FullPoem = await ArsPoeticaService.GeneratePoemAsync();
        DisplayedPoem = "";
        CurrentIndex = 0;

        // Start typewriter effect
        TypewriterTimer = new Timer(UpdateTypewriter, null, 0, TypewriterDelay);
    }

    private void UpdateTypewriter(object? state)
    {
        if (CurrentIndex < FullPoem.Length)
        {
            DisplayedPoem += FullPoem[CurrentIndex];
            CurrentIndex++;
            StateHasChanged();
        }
        else
        {
            TypewriterTimer?.Dispose();
            IsGenerating = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        TypewriterTimer?.Dispose();
    }
}
