@page "/"
@using AutoArsPoetica.Client.Models
@inject IJSRuntime JS
@inject IArsPoeticaService ArsPoeticaService
@implements IDisposable

<link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@200..900&display=swap" rel="stylesheet">

<div class="page-container">
    @if (!isStarted)
    {
        <div class="start-screen">
            <h1 class="start-title">AUTOPOETICA</h1>
            <div class="poem-block">
                <div class="poem-text">// Poetic Engine Initialization</div>
                <br />
                <div class="poem-text">Initialize(Atmosphere);</div>
                <div class="poem-text">Initialize(Aviation);</div>
                <div class="poem-text">Initialize(Crypto);</div>
                <br />
                <div class="poem-text">While (World.Changes()) {</div>
                <div class="poem-text">&nbsp;&nbsp;Poem = Generate();</div>
                <div class="poem-text">&nbsp;&nbsp;Render(Poem);</div>
                <div class="poem-text">}</div>
            </div>
            <div class="start-button" @onclick="() => isStarted = true">Start</div>
        </div>
    }
    else if (!languageSelected)
    {
        <div class="language-screen">
            <div class="language-question">Which Language Do You Speak?</div>
            <div class="language-options">
                <div class="language-option" @onclick="() => SelectLanguage(EnvType.Aviation)">Signal Echo</div>
                <div class="language-option" @onclick="() => SelectLanguage(EnvType.Cryptography)">Encrypted Silence</div>
                <div class="language-option" @onclick="() => SelectLanguage(EnvType.Atmosphere)">Mistic Pressure</div>
            </div>
        </div>
    }
    else
    {
        <div class="final-screen" style="opacity:1;">
            <div class="top-bar">
                <div class="final-title">AUTOPOETICA</div>
                <div class="epoch-sidebar">
                    <div class="epoch-current" @onclick="ToggleEpochList" style="cursor:pointer;">
                        @CurrentEpoch
                    </div>
                    @if (IsEpochListOpen)
                    {
                        <div class="epoch-list-unboxed">
                            @foreach (var poem in Poems)
                            {
                                <div class="epoch-list-item" @onclick="() => ShowPoemFromList(poem)">@poem.Epoch</div>
                            }
                        </div>
                    }
                </div>
            </div>
            <div class="final-center">
                <div class="final-poem-box">
                    @((MarkupString)DisplayedPoem.Replace("\n", "<br />"))
                </div>
            </div>
            <div class="final-menu" style="left: 7rem; right: 12rem;">
                <div style="cursor:pointer;" @onclick="ReturnToStart">About</div>
                <div style="cursor:pointer;" @onclick="GeneratePoem">Generate</div>
                <div style="cursor:pointer;" @onclick="EnableDarkMode">Dark Mode &lt;/&gt;</div>
            </div>
        </div>
        @if (IsDarkMode)
        {
            <div class="darkmode-overlay">
                <div class="darkmode-title">AUTOPOETICA</div>
                <div class="darkmode-center">
                    <div class="darkmode-content">
                        //Metadata<br />
                        @CurrentDay<br />
                        @CurrentTime<br /><br />
                        //Environment<br />
                        <div class="env-buttons">
                            <span @onclick="() => SelectEnv(EnvType.Atmosphere)"
                                style="cursor:pointer; font-weight:@(SelectedEnv == EnvType.Atmosphere ? "bold" : "normal"); display:block; margin-bottom:0.5rem;">Atmosphere</span>
                            <span @onclick="() => SelectEnv(EnvType.Aviation)"
                                style="cursor:pointer; font-weight:@(SelectedEnv == EnvType.Aviation ? "bold" : "normal"); display:block; margin-bottom:0.5rem;">Aviation</span>
                            <span @onclick="() => SelectEnv(EnvType.Cryptography)"
                                style="cursor:pointer; font-weight:@(SelectedEnv == EnvType.Cryptography ? "bold" : "normal"); display:block; margin-bottom:1rem;">Cryptography</span>
                        </div>
                        //Variables<br />
                        @foreach (var value in GetSelectedEnvList())
                        {
                            <div>@value</div>
                        }
                    </div>
                </div>
                <div class="darkmode-menu">
                    <div style="opacity:0;">Generate</div>
                    <div style="margin-top:2rem; cursor:pointer;" @onclick="DisableDarkMode">Bright Mode &lt;/&gt;</div>
                    <div style="opacity:0; margin-top:2rem;">About</div>
                </div>
            </div>
        }
    }
</div>

<style>
    .page-container {
        min-height: 100vh;
        width: 100vw;
        background: #f5ebdd;
        font-family: 'Inconsolata', monospace;
        position: relative;
        overflow-x: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .start-screen {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        height: 100vh;
        width: 100%;
        color: #222;
    }

    .start-title {
        font-size: 2rem;
        font-weight: 400;
        letter-spacing: 0.05em;
        position: absolute;
        top: 2rem;
    }

    .start-button {
        position: absolute;
        bottom: 5rem;
        cursor: pointer;
        font-size: 1rem;
    }

    .poem-block {
        text-align: left;
    }

    .poem-text {
        font-size: 1rem;
        margin-bottom: 0.5rem;
        font-family: 'Inconsolata', monospace;
    }

    .final-screen {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: #f5ebdd;
        z-index: 3;
        display: flex;
        flex-direction: column;
        height: 100vh;
        width: 100vw;
        transition: opacity 0.5s cubic-bezier(.4, 0, .2, 1);
    }

    .final-title {
        position: static;
        font-size: 1.3rem;
        color: #222;
        text-align: left;
        font-family: 'Inconsolata', monospace;
        font-weight: 400;
        background: transparent;
        padding: 0;
        border: none;
        outline: none;
    }

    .final-center {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .final-poem-box {
        padding: 1.5rem;
        font-size: 1rem;
        font-family: 'Inconsolata', monospace;
        min-width: 400px;
        min-height: 250px;
        color: #222;
        background: transparent;
        text-align: left;
    }

    .final-menu {
        position: absolute;
        left: 7rem;
        right: 12rem;
        bottom: 2rem;
        font-size: 1rem;
        color: #222;
        font-family: 'Inconsolata', monospace;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .darkmode-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: #111;
        color: #f5ebdd;
        z-index: 100;
        width: 100vw;
        height: 100vh;
        display: flex;
        flex-direction: column;
        transition: opacity 0.5s cubic-bezier(.4, 0, .2, 1);
        font-family: 'Inconsolata', monospace;
    }

    .darkmode-title {
        position: absolute;
        top: 2rem;
        left: 5rem;
        font-size: 1.3rem;
        color: #f5ebdd;
        font-family: 'Inconsolata', monospace;
        font-weight: 400;
    }

    .darkmode-center {
        flex: 1;
        display: flex;
        align-items: flex-start;
        justify-content: flex-end;
        padding-right: 12rem;
        padding-top: 6rem;
    }

    .darkmode-content {
        padding: 1.5rem 1.5rem 1.5rem 1.5rem;
        font-size: 1rem;
        min-width: 400px;
        min-height: 250px;
        color: #f5ebdd;
        background: transparent;
        text-align: left;
    }

    .darkmode-menu {
        position: absolute;
        left: 5rem;
        bottom: 2rem;
        font-size: 1rem;
        color: #f5ebdd;
        font-family: 'Inconsolata', monospace;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        padding-bottom: 3rem;
    }

    .env-buttons {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        margin-bottom: 1rem;
    }

    .language-screen {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        height: 100vh;
        width: 100%;
        color: #222;
        position: relative;
    }

    .language-question {
        position: absolute;
        top: 30%;
        font-size: 1rem;
    }

    .language-options {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        width: 60%;
        gap: 2rem;
        justify-items: center;
        align-items: start;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .language-option {
        cursor: pointer;
        font-size: 1rem;
    }

    .epoch-sidebar {
        position: static;
        top: unset;
        width: 100px;
        background: transparent;
        z-index: 200;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        font-family: 'Inconsolata', monospace;
    }
    .epoch-current {
        font-size: 0.95rem;
        font-weight: 400;
        color: #222;
        background: #f5ebdd;
        border-radius: 4px;
        padding: 0.2rem 0.5rem;
        margin-bottom: 0.2rem;
        box-shadow: 0 1px 4px rgba(0,0,0,0.04);
        transition: background 0.2s;
    }
    .epoch-current:hover {
        background: #e0d6c7;
    }
    .epoch-list-unboxed {
        position: fixed;
        top: unset;
        width: 100px;
        max-height: 100vh;
        background: none;
        border: none;
        box-shadow: none;
        padding: 0.2rem 0.5rem;
        margin: 0;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        z-index: 201;
        margin-top: 2.2rem;
    }
    .epoch-list-item {
        font-size: 0.95rem;
        font-weight: 400;
        color: #888;
        font-family: 'Inconsolata', monospace;
        background: none;
        border-radius: 0;
        padding: 0.2rem 0.5rem;
        margin-bottom: 0.2rem;
        transition: background 0.2s;
    }

    .top-bar {
        width: 100vw;
        display: flex;
        flex-direction: row;
        align-items: flex-start;
        justify-content: space-between;
        padding: 2rem 2rem 0 5rem;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        z-index: 10;
    }
</style>

@code {
    private bool isStarted = false;
    private bool languageSelected = false;
    private bool IsDarkMode = false;
    private string CurrentDay = "";
    private string CurrentTime = "";
    private System.Threading.Timer? _timer;
    private enum EnvType { Atmosphere, Aviation, Cryptography }
    private EnvType SelectedEnv = EnvType.Atmosphere;
    private readonly List<string> AtmosphereList = new() { "Cloudiness", "Temperature", "Humidity", "WindSpeed", "Precipitation Type", "UVIndex",
"Visibility", "Pressure" };
    private readonly List<string> AviationList = new() { "Aircrafts", "Average Speed", "Landings", "Takeoffs", "Aircraft Type", "Flight Duration", "Time Of Day", "Direction" };
    private readonly List<string> CryptoList = new() { "Price", "Price Change 24h", "Volume", "Ask", "Bid", "Trading", "Status", "Product ID" };

    // Poem generation variables
    private string FullPoem = "";
    private string DisplayedPoem = "";
    private bool IsGenerating = false;
    private Timer? TypewriterTimer;
    private int CurrentIndex = 0;
    private const int TypewriterDelay = 50; // milliseconds between characters

    private List<string> GetSelectedEnvList() => SelectedEnv switch
    {
        EnvType.Atmosphere => AtmosphereList,
        EnvType.Aviation => AviationList,
        EnvType.Cryptography => CryptoList,
        _ => CryptoList
    };

    private async Task GeneratePoem()
    {
        if (IsGenerating) return;

        IsGenerating = true;

        // Stop any existing typewriter effect
        TypewriterTimer?.Dispose();

        // Get new poem based on selected environment
        if (SelectedEnv == EnvType.Atmosphere)
        {
            FullPoem = await ArsPoeticaService.GenerateWeatherPoemAsync();
        }
        else if (SelectedEnv == EnvType.Aviation)
        {
            FullPoem = await ArsPoeticaService.GenerateWeatherPoemAsync();
        }
        else if (SelectedEnv == EnvType.Cryptography)
        {
            FullPoem = await ArsPoeticaService.GenerateCryptoPoemAsync();
        }
        DisplayedPoem = "";
        CurrentIndex = 0;

        // Start typewriter effect
        TypewriterTimer = new Timer(UpdateTypewriter, null, 0, TypewriterDelay);
    }

    private void UpdateTypewriter(object? state)
    {
        if (CurrentIndex < FullPoem.Length)
        {
            char currentChar = FullPoem[CurrentIndex];
            DisplayedPoem += currentChar;
            CurrentIndex++;
            StateHasChanged();
        }
        else
        {
            TypewriterTimer?.Dispose();
            IsGenerating = false;
            StateHasChanged();
        }
    }

    private void SelectEnv(EnvType env)
    {
        SelectedEnv = env;
        StateHasChanged();
    }

    private void SelectLanguage(EnvType env)
    {
        SelectedEnv = env;
        languageSelected = true;
    }

    public void Dispose()
    {
        TypewriterTimer?.Dispose();
        _timer?.Dispose();
        EpochTimer?.Dispose();
        EpochApiTimer?.Dispose();
    }

    private async void EnableDarkMode()
    {
        IsDarkMode = true;
        UpdateDateTime();
        _timer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() => UpdateDateTime());
        }, null, 0, 1000);
        await JS.InvokeVoidAsync("eval", "document.body.style.overflow='hidden'");
        StateHasChanged();
    }
    private async void DisableDarkMode()
    {
        IsDarkMode = false;
        _timer?.Dispose();
        await JS.InvokeVoidAsync("eval", "document.body.style.overflow='auto'");
        StateHasChanged();
    }
    private void UpdateDateTime()
    {
        var now = DateTime.Now;
        CurrentDay = now.DayOfWeek.ToString();
        CurrentTime = now.ToString("HH:mm");
        StateHasChanged();
    }

    private void ReturnToStart()
    {
        isStarted = false;
        languageSelected = false;
        DisplayedPoem = "";
        FullPoem = "";
        if (IsGenerating)
        {
            TypewriterTimer?.Dispose();
            IsGenerating = false;
        }
    }

    private long CurrentEpoch = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
    private List<Poem> Poems = new();
    private bool IsEpochListOpen = false;
    private Timer? EpochTimer;
    private Timer? EpochApiTimer;

    protected override void OnInitialized()
    {
        // Start the epoch update timer (every second)
        EpochTimer = new Timer(_ =>
        {
            CurrentEpoch = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            InvokeAsync(StateHasChanged);
        }, null, 0, 1000);

        // Start the simulated API timer (every 3 seconds)
        EpochApiTimer = new Timer(async _ =>
        {
            Poems = await FetchPoemsAsync();
            await InvokeAsync(StateHasChanged);
        }, null, 0, 3000);
    }

    private void ToggleEpochList()
    {
        IsEpochListOpen = !IsEpochListOpen;
    }

    private async Task<List<Poem>> FetchPoemsAsync()
    {
        // Simulate fetching the last 23 epochs (1 per second)
        return await ArsPoeticaService.FetchPoemsAsync();
    }

    private void ShowPoemFromList(Poem poem)
    {
        // Stop any ongoing typewriter effect
        TypewriterTimer?.Dispose();
        IsGenerating = false;

        // Set the displayed poem to the selected one
        DisplayedPoem = poem.Content; // Adjust property name if needed
        FullPoem = poem.Content;      // Optional: keep FullPoem in sync
        StateHasChanged();
    }
}
