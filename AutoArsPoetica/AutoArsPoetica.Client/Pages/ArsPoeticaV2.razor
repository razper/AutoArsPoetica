@page "/"
@inject IJSRuntime JS
@inject IArsPoeticaService ArsPoeticaService
@implements IDisposable

<link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@200..900&display=swap" rel="stylesheet">

<div class="scroll-reveal-root">
    <div class="fixed-content" style="color:@TextColor; opacity:@(1 - SlideProgress * 2);">
        <h1 class="title">AUTOPOETICA</h1>
        <div class="poem-block">
            <div class="poem-text">//Index: Systems Kind Of Silence</div>
            <div class="poem-text" style="margin-top:2rem;">
                Const Index = [<br />
                &nbsp;&nbsp;"Atmosphere(Sky, Breath, Silence)",<br />
                &nbsp;&nbsp;"Aviation(Path, Signal, Wait)",<br />
                &nbsp;&nbsp;"Cryptography(Noise, Number, Faith)"<br />
                ];
            </div>
        </div>
    </div>
    <div class="black-overlay" style="height:@OverlayHeight;"></div>
    <div class="final-screen" style="transform: translateY(@FinalScreenTranslateY); opacity:@SlideProgress;">
        <div class="final-title">AUTOPOETICA</div>
        <div class="final-center">
            <div class="final-poem-box">
                @((MarkupString)DisplayedPoem.Replace("\n", "<br />"))
            </div>
        </div>
        <div class="final-menu">
            <div style="cursor:pointer;" @onclick="GeneratePoem">Generate</div>
            <div style="margin-top:2rem; cursor:pointer;" @onclick="EnableDarkMode">Dark Mode &lt;/&gt;</div>
            <div style="margin-top:2rem;">About</div>
        </div>
    </div>
    @if (IsDarkMode)
    {
        <div class="darkmode-overlay">
            <div class="darkmode-title">AUTOPOETICA</div>
            <div class="darkmode-center">
                <div class="darkmode-content">
                    //Metadata<br />
                    @CurrentDay<br />
                    @CurrentTime<br /><br />
                    //Environment<br />
                    <div class="env-buttons">
                        <span @onclick="() => SelectEnv(EnvType.Atmosphere)"
                            style="cursor:pointer; font-weight:@(SelectedEnv == EnvType.Atmosphere ? "bold" : "normal"); display:block; margin-bottom:0.5rem;">Atmosphere</span>
                        <span @onclick="() => SelectEnv(EnvType.Aviation)"
                            style="cursor:pointer; font-weight:@(SelectedEnv == EnvType.Aviation ? "bold" : "normal"); display:block; margin-bottom:0.5rem;">Aviation</span>
                        <span @onclick="() => SelectEnv(EnvType.Cryptography)"
                            style="cursor:pointer; font-weight:@(SelectedEnv == EnvType.Cryptography ? "bold" : "normal"); display:block; margin-bottom:1rem;">Cryptography</span>
                    </div>
                    //Variables<br />
                    @foreach (var value in GetSelectedEnvList())
                    {
                        <div>@value</div>
                    }
                </div>
            </div>
            <div class="darkmode-menu">
                <div style="opacity:0;">Generate</div>
                <div style="margin-top:2rem; cursor:pointer;" @onclick="DisableDarkMode">Bright Mode &lt;/&gt;</div>
                <div style="opacity:0; margin-top:2rem;">About</div>
            </div>
        </div>
    }
    <div style="height: 250vh;"></div> <!-- Spacer to enable scrolling -->
</div>

<style>
    .scroll-reveal-root {
        min-height: 100vh;
        width: 100vw;
        background: #f5ebdd;
        font-family: 'Inconsolata', monospace;
        position: relative;
        overflow-x: hidden;
    }

    .fixed-content {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        pointer-events: none;
        z-index: 2;
        transition: color 0.3s linear, opacity 0.3s linear;
    }

    .title {
        font-size: 2rem;
        font-weight: 400;
        letter-spacing: 0.05em;
        margin-bottom: 8rem;
        background: transparent;
        padding: 0;
        border: none;
        outline: none;
    }

    .poem-block {
        text-align: left;
    }

    .poem-text {
        font-size: 1rem;
        margin-bottom: 0.5rem;
        font-family: 'Inconsolata', monospace;
    }

    .black-overlay {
        position: fixed;
        left: 0;
        right: 0;
        bottom: 0;
        background: #111;
        z-index: 1;
        transition: height 0.3s linear;
        pointer-events: none;
    }

    .final-screen {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: #f5ebdd;
        z-index: 3;
        display: flex;
        flex-direction: column;
        height: 100vh;
        width: 100vw;
        transition: transform 0.5s cubic-bezier(.4, 0, .2, 1), opacity 0.5s cubic-bezier(.4, 0, .2, 1);
    }

    .final-title {
        position: absolute;
        top: 2rem;
        left: 5rem;
        font-size: 1.3rem;
        color: #222;
        text-align: left;
        font-family: 'Inconsolata', monospace;
        font-weight: 400;
        background: transparent;
        padding: 0;
        border: none;
        outline: none;
    }

    .final-center {
        flex: 1;
        display: flex;
        align-items: flex-start;
        justify-content: flex-start;
        padding-left: 12rem;
        padding-top: 6rem;
    }

    .final-poem-box {
        padding: 1.5rem 1.5rem 6rem 1.5rem;
        font-size: 1rem;
        font-family: 'Inconsolata', monospace;
        min-width: 400px;
        min-height: 250px;
        color: #222;
        background: transparent;
        text-align: left;
    }

    .final-menu {
        position: absolute;
        left: 5rem;
        bottom: 2rem;
        font-size: 1rem;
        color: #222;
        font-family: 'Inconsolata', monospace;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        padding-bottom: 3rem;
    }

    .darkmode-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: #111;
        color: #f5ebdd;
        z-index: 100;
        width: 100vw;
        height: 100vh;
        display: flex;
        flex-direction: column;
        transition: opacity 0.5s cubic-bezier(.4, 0, .2, 1);
        font-family: 'Inconsolata', monospace;
    }

    .darkmode-title {
        position: absolute;
        top: 2rem;
        left: 5rem;
        font-size: 1.3rem;
        color: #f5ebdd;
        font-family: 'Inconsolata', monospace;
        font-weight: 400;
    }

    .darkmode-center {
        flex: 1;
        display: flex;
        align-items: flex-start;
        justify-content: flex-end;
        padding-right: 12rem;
        padding-top: 6rem;
    }

    .darkmode-content {
        padding: 1.5rem 1.5rem 1.5rem 1.5rem;
        font-size: 1rem;
        min-width: 400px;
        min-height: 250px;
        color: #f5ebdd;
        background: transparent;
        text-align: left;
    }

    .darkmode-menu {
        position: absolute;
        left: 5rem;
        bottom: 2rem;
        font-size: 1rem;
        color: #f5ebdd;
        font-family: 'Inconsolata', monospace;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        padding-bottom: 3rem;
    }

    .env-buttons {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        margin-bottom: 1rem;
    }
</style>

@code {
    private double ScrollProgress = 0;
    // 0-0.5: transition, 0.5-1: slide up
    private double SlideProgress => Math.Clamp((ScrollProgress - 0.5) * 2, 0, 1);
    private string TextColor => InterpolateColor((34, 34, 34), (245, 235, 221), Math.Min(ScrollProgress * 2, 1));
    private string OverlayHeight => ScrollProgress < 0.5 ? $"{(int)(ScrollProgress * 200)}vh" : "100vh";
    private string FinalScreenTranslateY => SlideProgress < 1 ? $"{(1 - SlideProgress) * 100}vh" : "0vh";
    private DotNetObjectReference<ArsPoeticaV2>? _dotNetRef;
    private IJSObjectReference? _jsModule;
    private bool IsDarkMode = false;
    private string CurrentDay = "";
    private string CurrentTime = "";
    private System.Threading.Timer? _timer;
    private enum EnvType { Atmosphere, Aviation, Cryptography }
    private EnvType SelectedEnv = EnvType.Atmosphere;
    private readonly List<string> AtmosphereList = new() { "Cloudiness", "Temperature", "Humidity", "WindSpeed", "Precipitation Type", "UVIndex",
"Visibility", "Pressure" };
    private readonly List<string> AviationList = new() { "Aircrafts", "Average Speed", "Landings", "Takeoffs", "Aircraft Type", "Flight Duration", "Time Of Day", "Direction" };
    private readonly List<string> CryptoList = new() { "Price", "Price Change 24h", "Volume", "Ask", "Bid", "Trading", "Status", "Product ID" };

    // Poem generation variables
    private string FullPoem = "";
    private string DisplayedPoem = "";
    private bool IsGenerating = false;
    private Timer? TypewriterTimer;
    private int CurrentIndex = 0;
    private const int TypewriterDelay = 50; // milliseconds between characters

    private List<string> GetSelectedEnvList() => SelectedEnv switch
    {
        EnvType.Atmosphere => AtmosphereList,
        EnvType.Aviation => AviationList,
        EnvType.Cryptography => CryptoList,
        _ => CryptoList
    };

    private async Task GeneratePoem()
    {
        if (IsGenerating) return;

        IsGenerating = true;

        // Stop any existing typewriter effect
        TypewriterTimer?.Dispose();

        // Get new poem based on selected environment
        if (SelectedEnv == EnvType.Atmosphere)
        {
            FullPoem = await ArsPoeticaService.GenerateWeatherPoemAsync();
        }
        else if (SelectedEnv == EnvType.Aviation)
        {
            FullPoem = await ArsPoeticaService.GenerateWeatherPoemAsync();
        }
        else if (SelectedEnv == EnvType.Cryptography)
        {
            FullPoem = await ArsPoeticaService.GenerateCryptoPoemAsync();
        }
        DisplayedPoem = "";
        CurrentIndex = 0;

        // Start typewriter effect
        TypewriterTimer = new Timer(UpdateTypewriter, null, 0, TypewriterDelay);
    }

    private void UpdateTypewriter(object? state)
    {
        if (CurrentIndex < FullPoem.Length)
        {
            char currentChar = FullPoem[CurrentIndex];
            DisplayedPoem += currentChar;
            CurrentIndex++;
            StateHasChanged();
        }
        else
        {
            TypewriterTimer?.Dispose();
            IsGenerating = false;
            StateHasChanged();
        }
    }

    private void SelectEnv(EnvType env)
    {
        SelectedEnv = env;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/scrollTransition.js");
            await _jsModule.InvokeVoidAsync("registerScrollHandler", _dotNetRef);
        }
    }

    [JSInvokable]
    public void OnScrollChanged(double scrollY)
    {
        double docHeight = DocumentHeight;
        double winHeight = WindowHeight;
        double maxScroll = docHeight - winHeight;
        double progress = maxScroll > 0 ? Math.Clamp(scrollY / maxScroll, 0, 1) : 0;
        if (Math.Abs(progress - ScrollProgress) > 0.001)
        {
            ScrollProgress = progress;
            StateHasChanged();
        }
    }

    // These will be set by JS interop
    private double DocumentHeight = 0;
    private double WindowHeight = 0;

    [JSInvokable]
    public void OnResize(double docHeight, double winHeight)
    {
        DocumentHeight = docHeight;
        WindowHeight = winHeight;
    }

    private string InterpolateColor((int r, int g, int b) from, (int r, int g, int b) to, double t)
    {
        int r = (int)(from.r + (to.r - from.r) * t);
        int g = (int)(from.g + (to.g - from.g) * t);
        int b = (int)(from.b + (to.b - from.b) * t);
        return $"rgb({r},{g},{b})";
    }

    public async void Dispose()
    {
        if (_jsModule is not null)
        {
            await _jsModule.InvokeVoidAsync("unregisterScrollHandler");
            await _jsModule.DisposeAsync();
        }
        _dotNetRef?.Dispose();
        TypewriterTimer?.Dispose();
        _timer?.Dispose();
    }

    private async void EnableDarkMode()
    {
        IsDarkMode = true;
        UpdateDateTime();
        _timer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() => UpdateDateTime());
        }, null, 0, 1000);
        await JS.InvokeVoidAsync("eval", "document.body.style.overflow='hidden'");
        StateHasChanged();
    }
    private async void DisableDarkMode()
    {
        IsDarkMode = false;
        _timer?.Dispose();
        await JS.InvokeVoidAsync("eval", "document.body.style.overflow='auto'");
        StateHasChanged();
    }
    private void UpdateDateTime()
    {
        var now = DateTime.Now;
        CurrentDay = now.DayOfWeek.ToString();
        CurrentTime = now.ToString("HH:mm");
        StateHasChanged();
    }
}
