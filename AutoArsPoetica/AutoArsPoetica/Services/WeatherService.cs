using AutoArsPoetica.Models;

namespace AutoArsPoetica.Services;

public class WeatherService : IWeatherService
{
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;

    public WeatherService(HttpClient httpClient, IConfiguration configuration)
    {
        _httpClient = httpClient;
        _configuration = configuration;
    }

    public async Task<WeatherData> GetWeatherDataAsync()
    {
        // Note: You'll need to replace this with your actual weather API endpoint and key
        var apiKey = _configuration["WeatherApi:ApiKey"] ?? throw new InvalidOperationException("Weather API key not found in configuration");
        var baseUrl = _configuration["WeatherApi:BaseUrl"] ?? throw new InvalidOperationException("Weather API base URL not found in configuration");

        try
        {
            var response = await _httpClient.GetAsync($"{baseUrl}?lat=32.794044&lon=34.989571&appid={apiKey}");
            response.EnsureSuccessStatusCode();
            var weatherData = await response.Content.ReadFromJsonAsync<WeatherData>();
            return weatherData ?? throw new Exception("No weather data received");
        }
        catch (Exception ex)
        {
            throw new Exception($"Error fetching weather data: {ex.Message}");
        }
    }
}


public static class WeatherPoemPromptGenerator
{
    public static string GeneratePrompt(WeatherData weather)
    {
        return $@"
You are a poet generating a short free-verse poem The poem must be 5 to 10 lines long, split into 1 or 2 stanzas. Each line must contain no more than 4 words.

The poem is shaped by weather data retrieved from a structured object called `WeatherData`. The weather data is provided as numerical or string values. Use the following fields to influence both:

1. **Lyrical content** (emotional tone, imagery, vocabulary)
2. **Visual structure** (line length, breaks, rhythm, punctuation)

Weather fields (from WeatherData):
- Cloudiness: `{weather.Clouds.All}` (int, %)
- Temperature: `{weather.Main.Temperature}` (double, °C)
- Humidity: `{weather.Main.Humidity}` (int, %)
- Wind Speed: `{weather.Wind.Speed}` (double, km/h)
- Precipitation Type: `{weather.Weather[0].Description}` (string)
- Visibility: `{weather.Visibility}` (int, meters)
- Atmospheric Pressure: `{weather.Main.Pressure}` (int, hPa)

**Guidelines:**

→ **Visual Style:**
- `Wind.Speed`:  
  - High = short, broken lines, hyphens.  
  - Low = steady, equal-length lines.
  
- `Clouds.All`:  
  - More clouds = fluid, murky lines.  
  - Clear skies = sparse, short lines.

- `Humidity`:  
  - High = dense rhythm, run-ons.  
  - Low = airy, distinct line endings.

- `Visibility`:  
  - Low = fragmented lines, hidden words.  
  - High = clear phrasing, full structure.

- `Weather[0].Description`:  
  - Rain = soft rhythm, ellipses...  
  - Snow = wide spaces, slow pace.  
  - Hail = sharp breaks, abrupt punctuation.

→ **Lyrical Content & Emotion:**
- `Main.Temperature`:  
  - High = vivid, passionate, urgent language.  
  - Low = still, distant, restrained tone.

- `Clouds.All`:  
  - High = dreamlike, introspective imagery.  
  - Low = clear, optimistic, concrete words.

- `Humidity`:  
  - High = blurry meaning, foggy metaphors.  
  - Low = crisp, precise diction.

- `Wind.Speed`:  
  - High = restless, scattered thoughts.  
  - Low = cohesive, grounded themes.

- `Weather[0].Description`:  
  - Use the type of precipitation as metaphor (e.g., rain = longing, snow = silence, hail = chaos).

- `Main.Pressure`:  
  - High = tension, compressed expression.  
  - Low = openness, softness, fragility.


**Important**:  
- Do **not** mention any weather values explicitly.  
- Let the poem reflect the **emotional and visual atmosphere** generated by the data.  
- A reader who doesn't know the weather or language should **still recognize this as a poem**, through its form and balance.

Generate the poem in **English only**, following all constraints.";
    }
}